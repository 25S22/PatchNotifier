import requests
import xml.etree.ElementTree as ET
from requests.auth import HTTPBasicAuth
import pandas as pd
import logging
import sys
import os
import win32com.client as win32
from datetime import datetime

# === HARD-CODED CONFIGURATION ===
# Fill in your Qualys credentials and settings here; the script will only prompt for CVE IDs.
USERNAME = "your_qualys_username"
PASSWORD = "your_qualys_password"
CERT_PATH = "/path/to/your/corporate_cert.pem"  # or False to skip SSL verification
BASE_URL = "https://qualysapi.qg1.apps.qualys.in"  # e.g., region-specific API base URL
PAGE_SIZE = 100  # pagination size for QID-based searches
LOG_LEVEL = "INFO"  # e.g., "DEBUG", "INFO", "WARNING", "ERROR"

# === LOGGER SETUP ===
logger = logging.getLogger("QualysCVESearcher")
handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter("[%(levelname)s] %(message)s")
handler.setFormatter(formatter)
if not logger.handlers:
    logger.addHandler(handler)
logger.setLevel(getattr(logging, LOG_LEVEL.upper(), logging.INFO))


class QualysCVESearcher:
    def __init__(self, username, password, cert_path, base_url, page_size=100):
        """
        username, password: Qualys credentials
        cert_path: path to corporate CA bundle PEM, or False to skip verification
        base_url: e.g. "https://qualysapi.qg1.apps.qualys.in"
        page_size: used in search_vulnerable_hosts pagination
        """
        self.base_url = base_url.rstrip("/")
        self.session = requests.Session()
        self.auth = HTTPBasicAuth(username, password)
        self.cert_path = cert_path
        self.page_size = page_size
        self.fo_headers = {"X-Requested-With": "Python script"}
        self.qps_headers = {"Content-Type": "application/xml", "Accept": "application/xml"}

    def login(self):
        """Login to Qualys API and establish session (FO session)."""
        url = f"{self.base_url}/api/2.0/fo/session/"
        data = {"action": "login", "username": self.auth.username, "password": self.auth.password}
        logger.info("Logging in to Qualys API...")
        resp = self.session.post(url, headers=self.fo_headers, data=data, verify=self.cert_path)
        try:
            resp.raise_for_status()
        except Exception:
            logger.error(f"Login HTTP error: status {resp.status_code}, body: {resp.text}")
            raise
        if "QualysSession" not in self.session.cookies.get_dict():
            raise Exception("Login failed: QualysSession cookie not found.")
        logger.info("Login successful.")

    def logout(self):
        """Logout from Qualys API."""
        url = f"{self.base_url}/api/2.0/fo/session/"
        data = {"action": "logout"}
        try:
            self.session.post(url, headers=self.fo_headers, data=data, verify=self.cert_path)
        except Exception:
            pass
        logger.info("Logged out from Qualys API.")

    def get_qid_from_cve(self, cve_id):
        """
        Get Qualys QID(s) associated with a CVE using FO Knowledge Base API.
        """
        url = f"{self.base_url}/api/2.0/fo/knowledge_base/vuln/"
        params = {"action": "list", "details": "All", "cve_id": cve_id}
        logger.info(f"Looking up QID for CVE: {cve_id}")
        resp = self.session.get(url, headers=self.fo_headers, params=params, verify=self.cert_path)
        if resp.status_code != 200:
            logger.error(f"CVE→QID lookup returned {resp.status_code}. Body: {resp.text}")
            raise Exception(f"CVE→QID lookup failed for {cve_id}")
        try:
            root = ET.fromstring(resp.content)
        except ET.ParseError:
            logger.error(f"Malformed XML in CVE→QID lookup for {cve_id}. Raw response:\n{resp.text}")
            raise Exception("Malformed XML in CVE→QID lookup.")
        qids = []
        for vuln in root.findall(".//VULN"):
            qid = vuln.findtext("QID")
            title = vuln.findtext("TITLE", "")
            severity = vuln.findtext("SEVERITY_LEVEL", "")
            if qid:
                qids.append({"qid": qid, "title": title, "severity": severity, "cve": cve_id})
        if not qids:
            logger.warning(f"No QIDs found for CVE {cve_id}.")
        else:
            logger.info(f"Found QIDs for {cve_id}: {[q['qid'] for q in qids]}")
        return qids

    def build_vuln_detection_request(self, qids, offset):
        """
        Build XML request for vulnerability detection search using QIDs.
        """
        root = ET.Element("ServiceRequest")
        filters = ET.SubElement(root, "filters")
        if len(qids) == 1:
            ET.SubElement(filters, "Criteria", field="qid", operator="EQUALS").text = str(qids[0])
        else:
            ET.SubElement(filters, "Criteria", field="qid", operator="IN").text = ",".join(str(q) for q in qids)
        ET.SubElement(filters, "Criteria", field="status", operator="EQUALS").text = "Active"
        prefs = ET.SubElement(root, "preferences")
        ET.SubElement(prefs, "startFromOffset").text = str(offset)
        ET.SubElement(prefs, "limitResults").text = str(self.page_size)
        fields = ET.SubElement(root, "fields")
        host_vuln = ET.SubElement(fields, "HostInstanceVuln")
        for tag in ["hostInstanceId", "cveId", "qid", "status", "severity", "firstFound", "lastFound", "port", "protocol", "results"]:
            ET.SubElement(host_vuln, tag)
        host_asset = ET.SubElement(host_vuln, "hostAsset")
        for tag in ["id", "dnsHostName", "netbiosName", "operatingSystem", "lastVulnScan"]:
            ET.SubElement(host_asset, tag)
        return ET.tostring(root, encoding="utf-8")

    def search_vulnerable_hosts(self, qids):
        """
        Search for hosts with specific QID vulnerabilities via QPS REST API, paginated by self.page_size.
        Returns list of <HostInstanceVuln> elements.
        """
        if not qids:
            return []
        url = f"{self.base_url}/qps/rest/2.0/search/am/hostinstancevuln"
        offset, page = 1, 1
        results = []
        while True:
            logger.info(f"Fetching vulnerable hosts page {page}, offset {offset}...")
            body = self.build_vuln_detection_request(qids, offset)
            resp = self.session.post(url, headers=self.qps_headers, auth=self.auth, data=body, verify=self.cert_path)
            if resp.status_code == 400:
                logger.error(f"Bad Request (400) on hostinstancevuln search: {resp.text}")
                raise Exception(f"Bad Request in vulnerability search.")
            elif resp.status_code == 403:
                raise Exception("Forbidden: check credentials/access for vulnerability detection API.")
            resp.raise_for_status()
            try:
                root = ET.fromstring(resp.content)
            except ET.ParseError:
                logger.error(f"Malformed XML in vulnerability search. Raw:\n{resp.text}")
                raise Exception("Malformed XML in vulnerability search.")
            vulns = root.findall(".//HostInstanceVuln")
            if not vulns:
                logger.info("No more vulnerability records found.")
                break
            results.extend(vulns)
            has_more = root.findtext(".//hasMoreRecords") == "true"
            if not has_more:
                break
            offset += self.page_size
            page += 1
        return results

    def extract_vulnerability_details(self, vuln_instances):
        """
        Extract details from <HostInstanceVuln> elements into list of dicts.
        """
        results = []
        for vuln in vuln_instances:
            host_instance_id = vuln.findtext("hostInstanceId", "")
            cve_id = vuln.findtext("cveId", "")
            qid = vuln.findtext("qid", "")
            status = vuln.findtext("status", "")
            severity = vuln.findtext("severity", "")
            first_found = vuln.findtext("firstFound", "")
            last_found = vuln.findtext("lastFound", "")
            port = vuln.findtext("port", "")
            protocol = vuln.findtext("protocol", "")
            results_text = vuln.findtext("results", "") or ""
            results_summary = (results_text[:500] + "...") if len(results_text) > 500 else results_text

            host_asset = vuln.find("hostAsset")
            if host_asset is not None:
                host_id = host_asset.findtext("id", "")
                dns = host_asset.findtext("dnsHostName", "")
                netbios = host_asset.findtext("netbiosName", "")
                os_info = host_asset.findtext("operatingSystem", "")
                last_scan = host_asset.findtext("lastVulnScan", "")
            else:
                host_id = dns = netbios = os_info = last_scan = ""

            results.append({
                "Host ID": host_id,
                "Host Instance ID": host_instance_id,
                "DNS Name": dns,
                "NetBIOS Name": netbios,
                "Operating System": os_info,
                "CVE": cve_id,
                "QID": qid,
                "Severity": severity,
                "Status": status,
                "Port": port,
                "Protocol": protocol,
                "First Found": first_found,
                "Last Found": last_found,
                "Last Vulnerability Scan": last_scan,
                "Detection Results": results_summary
            })
        return results

    def get_host_list_detection(self, cve_ids, max_days_since_detection=365):
        """
        Direct CVE search via FO Host List Detection API; returns list of dicts.
        """
        url = f"{self.base_url}/api/2.0/fo/asset/host/vm/detection/"
        all_results = []
        for cve_id in cve_ids:
            cve_id = cve_id.strip()
            if not cve_id:
                continue
            logger.info(f"Searching hosts vulnerable to {cve_id} via Host List Detection API...")
            params = {
                "action": "list",
                "cve_id": cve_id,
                "status": "Active",
                "show_results": "1",
                "show_igs": "1",
                "max_days_since_detection": str(max_days_since_detection)
            }
            resp = self.session.get(url, headers=self.fo_headers, params=params, verify=self.cert_path)
            if resp.status_code != 200:
                logger.error(f"Host List Detection API returned {resp.status_code} for {cve_id}: {resp.text}")
                continue
            try:
                root = ET.fromstring(resp.content)
            except ET.ParseError:
                logger.error(f"Malformed XML in Host List Detection for {cve_id}. Raw:\n{resp.text}")
                continue
            hosts = root.findall(".//HOST")
            logger.info(f"Found {len(hosts)} HOST entries for CVE {cve_id}")
            for host in hosts:
                host_id = host.findtext("ID", "")
                host_ip = host.findtext("IP", "")
                host_dns = host.findtext("DNS", "")
                host_netbios = host.findtext("NETBIOS", "")
                host_os = host.findtext("OS", "")
                detections = host.findall(".//DETECTION")
                if not detections:
                    continue
                for det in detections:
                    det_qid = det.findtext("QID", "")
                    det_title = det.findtext("TITLE", "")
                    det_severity = det.findtext("SEVERITY", "")
                    det_port = det.findtext("PORT", "")
                    det_protocol = det.findtext("PROTOCOL", "")
                    det_first = det.findtext("FIRST_FOUND_DATETIME", "") or det.findtext("FIRST_FOUND", "")
                    det_last = det.findtext("LAST_FOUND_DATETIME", "") or det.findtext("LAST_FOUND", "")
                    det_status = det.findtext("STATUS", "")
                    det_results = det.findtext("RESULTS", "") or ""
                    det_results_summary = (det_results[:500] + "...") if len(det_results) > 500 else det_results

                    entry = {
                        "Host ID": host_id,
                        "Host Instance ID": "",  # not provided directly here
                        "DNS Name": host_dns,
                        "NetBIOS Name": host_netbios,
                        "Operating System": host_os,
                        "CVE": cve_id,
                        "QID": det_qid,
                        "Severity": det_severity,
                        "Status": det_status,
                        "Port": det_port,
                        "Protocol": det_protocol,
                        "First Found": det_first,
                        "Last Found": det_last,
                        "Last Vulnerability Scan": "",
                        "Detection Results": det_results_summary
                    }
                    all_results.append(entry)
            logger.info(f"Collected {len(all_results)} total entries so far.")
        return all_results

    def send_email(self, filename, cve_ids, vulnerable_count, total_detections):
        """
        Draft an Outlook email with the report attached if vulnerabilities found.
        """
        if vulnerable_count > 0:
            try:
                outlook = win32.Dispatch("Outlook.Application")
            except Exception as e:
                logger.error(f"Failed to dispatch Outlook.Application: {e}")
                return
            mail = outlook.CreateItem(0)
            cve_list_str = ", ".join(cve_ids)
            mail.Subject = f"[VULNERABILITY ALERT] {vulnerable_count} Vulnerable Hosts - CVE(s): {cve_list_str}"
            mail.Body = f"""
Hello,

Vulnerability scan results for CVE(s): {cve_list_str}

Summary:
- Total vulnerable hosts found: {vulnerable_count}
- Total vulnerability instances: {total_detections}

Please find attached the detailed vulnerability report.

IMMEDIATE ACTION REQUIRED:
- Review all affected systems
- Prioritize patching based on severity levels
- Verify patch deployment after remediation

Report generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Regards,
Vulnerability Management System
""".strip()
            try:
                abs_path = os.path.abspath(filename)
                mail.Attachments.Add(abs_path)
            except Exception as e:
                logger.error(f"Failed to attach file {filename}: {e}")
            mail.Display()
            logger.info(f"Email draft created for {vulnerable_count} vulnerable hosts.")
        else:
            logger.info("No vulnerable hosts found - no email drafted.")

                        sort_cols.append("Host ID")
                if "CVE" in df.columns:
                    sort_cols.append("CVE")
                df = df.sort_values(by=sort_cols)
                df = df.drop(columns=["Severity_Sort"], errors="ignore")

            # 5. Save Excel report
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            fname = f"CVE_Vulnerability_Report_{'_'.join(c.replace('CVE-', '') for c in cve_ids)}_{timestamp}.xlsx"
            with pd.ExcelWriter(fname, engine="openpyxl") as writer:
                df.to_excel(writer, sheet_name="Vulnerability Details", index=False)
                # Summary sheet
                unique_hosts = df["Host ID"].nunique() if "Host ID" in df.columns else 0
                total_instances = len(df)
                summary_data = {
                    "Metric": [
                        "Total CVEs Searched",
                        "Total Vulnerability Instances",
                        "Total Vulnerable Hosts",
                        "Critical Severity (5)",
                        "High Severity (4)",
                        "Medium Severity (3)",
                        "Low Severity (2)",
                        "Info Severity (1)",
                        "Search Date"
                    ],
                    "Value": [
                        len(cve_ids),
                        total_instances,
                        unique_hosts,
                        int(df[df["Severity"] == "5"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "4"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "3"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "2"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "1"].shape[0]) if "Severity" in df.columns else 0,
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    ]
                }
                summary_df = pd.DataFrame(summary_data)
                summary_df.to_excel(writer, sheet_name="Summary", index=False)
                # CVE to QID Mapping sheet if QID-based yielded any
                mapping = []
                for row in results:
                    cve = row.get("CVE", "")
                    qid = row.get("QID", "")
                    if cve and qid:


def run_cve_search(self, cve_ids):
        """
        Main: attempt QID-based search first; if that yields no results or errors, fallback to direct CVE search.
        Then generate Excel report and draft email if needed.
        """
        if not cve_ids:
            logger.error("No CVE IDs provided.")
            return

        self.login()
        try:
            results = []
            # 1. QID-based lookup
            all_qids = []
            for cve in cve_ids:
                try:
                    qid_info = self.get_qid_from_cve(cve)
                except Exception as e:
                    logger.warning(f"QID lookup failed for {cve}: {e}")
                    qid_info = []
                if qid_info:
                    all_qids.extend([info["qid"] for info in qid_info])
            if all_qids:
                try:
                    vuln_instances = self.search_vulnerable_hosts(all_qids)
                    logger.info(f"Found {len(vuln_instances)} instances via QID-based search.")
                    results = self.extract_vulnerability_details(vuln_instances)
                except Exception as e:
                    logger.error(f"Error in QID-based host search: {e}")
                    results = []
            else:
                logger.info("No QIDs found for provided CVEs; skipping QID-based search.")

            # 2. Fallback to direct CVE search if no results yet
            if not results:
                logger.info("Performing direct CVE search via Host List Detection API...")
                results = self.get_host_list_detection(cve_ids)
                logger.info(f"Direct CVE search returned {len(results)} entries.")

            # 3. If still no results, create empty report
            if not results:
                logger.info("No vulnerable hosts found. Creating empty report.")
                columns = [
                    "Host ID", "Host Instance ID", "DNS Name", "NetBIOS Name", "Operating System",
                    "CVE", "QID", "Severity", "Status", "Port", "Protocol",
                    "First Found", "Last Found", "Last Vulnerability Scan", "Detection Results"
                ]
                df_empty = pd.DataFrame(columns=columns)
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                fname = f"CVE_Vulnerability_Report_{'_'.join(c.replace('CVE-', '') for c in cve_ids)}_{timestamp}.xlsx"
                df_empty.to_excel(fname, index=False)
                logger.info(f"Empty Excel file created: {fname}")
                return

            # 4. Build DataFrame from results
            df = pd.DataFrame(results)
            # Sort by severity if present
            if "Severity" in df.columns:
                severity_order = ["5", "4", "3", "2", "1"]
                df["Severity_Sort"] = pd.Categorical(df["Severity"], categories=severity_order, ordered=True)
                sort_cols = ["Severity_Sort"]
                if "Host ID" in df.columns:
                    sort_cols.append("Host ID")
                if "CVE" in df.columns:
                    sort_cols.append("CVE")
                df = df.sort_values(by=sort_cols)
                df = df.drop(columns=["Severity_Sort"], errors="ignore")

            # 5. Save Excel report
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            fname = f"CVE_Vulnerability_Report_{'_'.join(c.replace('CVE-', '') for c in cve_ids)}_{timestamp}.xlsx"
            with pd.ExcelWriter(fname, engine="openpyxl") as writer:
                df.to_excel(writer, sheet_name="Vulnerability Details", index=False)
                # Summary sheet
                unique_hosts = df["Host ID"].nunique() if "Host ID" in df.columns else 0
                total_instances = len(df)
                summary_data = {
                    "Metric": [
                        "Total CVEs Searched",
                        "Total Vulnerability Instances",
                        "Total Vulnerable Hosts",
                        "Critical Severity (5)",
                        "High Severity (4)",
                        "Medium Severity (3)",
                        "Low Severity (2)",
                        "Info Severity (1)",
                        "Search Date"
                    ],
                    "Value": [
                        len(cve_ids),
                        total_instances,
                        unique_hosts,
                        int(df[df["Severity"] == "5"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "4"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "3"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "2"].shape[0]) if "Severity" in df.columns else 0,
                        int(df[df["Severity"] == "1"].shape[0]) if "Severity" in df.columns else 0,
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    ]
                }
                summary_df = pd.DataFrame(summary_data)
                summary_df.to_excel(writer, sheet_name="Summary", index=False)
                # CVE to QID Mapping sheet if QID-based yielded any
                mapping = []
                for row in results:
                    cve = row.get("CVE", "")
                    qid = row.get("QID", "")
                    if cve and qid:
                        mapping.append({"CVE": cve, "QID": qid})
                if mapping:
                    mapping_df = pd.DataFrame(mapping).drop_duplicates()
                    mapping_df.to_excel(writer, sheet_name="CVE to QID Mapping", index=False)
                # CVE List sheet
                cve_list_df = pd.DataFrame({"CVE": cve_ids})
                cve_list_df.to_excel(writer, sheet_name="CVE List", index=False)
            logger.info(f"Saved Excel report: {fname}")

            # 6. Draft email if vulnerabilities found
            unique_hosts = df["Host ID"].nunique() if "Host ID" in df.columns else 0
            self.send_email(fname, cve_ids, unique_hosts, len(df))

        finally:
            try:
                self.logout()
            except Exception as e:
                logger.warning(f"Error during logout: {e}")


def main():
    """
    Main entry: prompts only for CVE IDs; other settings are hardcoded above.
    """
    # Verify that hard-coded settings are provided
    missing = []
    if not USERNAME:
        missing.append("USERNAME")
    if not PASSWORD:
        missing.append("PASSWORD")
    if BASE_URL is None:
        missing.append("BASE_URL")
    if CERT_PATH is None:
        missing.append("CERT_PATH")
    if missing:
        logger.error(f"Please set the following configuration variables at the top of the script before running: {missing}")
        sys.exit(1)

    # Prompt only for CVE IDs
    cve_input = input("Enter CVE ID(s), separated by commas or spaces (e.g., CVE-2024-1234, CVE-2024-5678): ").strip()
    if not cve_input:
        logger.error("No CVE IDs entered. Exiting.")
        return
    # Parse comma- or space-separated
    cve_input_clean = cve_input.replace(",", " ")
    cve_list = [c.strip().upper() for c in cve_input_clean.split() if c.strip()]
    if not cve_list:
        logger.error("No valid CVE IDs parsed. Exiting.")
        return
    # Optional: warn if entries do not start with "CVE-"
    invalids = [c for c in cve_list if not c.startswith("CVE-")]
    if invalids:
        logger.warning(f"The following entries do not look like CVE IDs: {invalids}. They will still be used as entered.")

    logger.info(f"Searching for CVE(s): {cve_list}")

    # Instantiate and run search
    searcher = QualysCVESearcher(
        username=USERNAME,
        password=PASSWORD,
        cert_path=CERT_PATH,
        base_url=BASE_URL,
        page_size=PAGE_SIZE
    )
    try:
        searcher.run_cve_search(cve_list)
    except Exception as e:
        logger.error(f"Exception during CVE search: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
