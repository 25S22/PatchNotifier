import requests
import xml.etree.ElementTree as ET
from requests.auth import HTTPBasicAuth
import csv

class QualysSoftwareSearch:
    def __init__(self, username, password, cert_path):
        self.base_url = "https://qg1.qualysapi.in"
        self.session = requests.Session()
        self.auth = HTTPBasicAuth(username, password)
        self.cert_path = cert_path
        self.headers = {
            "Content-Type": "application/xml",
            "Accept": "application/xml"
        }

    def login(self):
        url = f"{self.base_url}/api/2.0/fo/session/"
        data = {
            "action": "login",
            "username": self.auth.username,
            "password": self.auth.password
        }
        resp = self.session.post(url, data=data, verify=self.cert_path)
        resp.raise_for_status()
        print("‚úÖ Login successful!")

    def logout(self):
        url = f"{self.base_url}/api/2.0/fo/session/"
        data = {"action": "logout"}
        resp = self.session.post(url, data=data, verify=self.cert_path)
        resp.raise_for_status()
        print("‚úÖ Logged out!")

    def build_search_body(self, software_name):
        root = ET.Element("ServiceRequest")
        filters = ET.SubElement(root, "filters")
        criteria = ET.SubElement(filters, "Criteria", {
            "field": "software",
            "operator": "EQUALS"
        })
        criteria.text = software_name
        return ET.tostring(root, encoding="utf-8", method="xml")

    def search_host_assets(self, software_name):
        search_url = f"{self.base_url}/qps/rest/2.0/search/am/hostasset"
        all_assets = []
        page = 1

        while True:
            print(f"üîç Fetching page {page}...")
            body = self.build_search_body(software_name)
            resp = self.session.post(
                search_url,
                headers=self.headers,
                auth=self.auth,
                data=body,
                verify=self.cert_path
            )
            resp.raise_for_status()

            root = ET.fromstring(resp.content)
            has_more = root.findtext('.//hasMoreRecords') == "true"
            assets = root.findall('.//HostAsset')
            print(f"‚úÖ Found {len(assets)} assets on page {page}")
            all_assets.extend(assets)

            if not has_more:
                break
            page += 1

        return all_assets

    def extract_software_info(self, host_assets):
        results = []
        for asset in host_assets:
            hostname = asset.findtext(".//hostName")
            asset_id = asset.findtext(".//id")
            softwares = asset.findall(".//Software")
            for sw in softwares:
                name = sw.findtext("name")
                version = sw.findtext("version")
                results.append({
                    "Host Name": hostname,
                    "Asset ID": asset_id,
                    "Software": name,
                    "Version": version
                })
        return results

    def save_to_csv(self, data, filename="output.csv"):
        if not data:
            print("‚ö†Ô∏è No data to write.")
            return
        with open(filename, mode='w', newline='') as file:
            writer = csv.DictWriter(file, fieldnames=data[0].keys())
            writer.writeheader()
            writer.writerows(data)
        print(f"üìÅ Data written to {filename}")

    def run(self, software_name):
        self.login()
        try:
            assets = self.search_host_assets(software_name)
            data = self.extract_software_info(assets)
            self.save_to_csv(data)
        finally:
            self.logout()

# ------------------ MAIN FUNCTION ------------------

def main():
    # Replace these with your actual credentials and cert
    USERNAME = "your_qualys_username"
    PASSWORD = "your_qualys_password"
    CERT_PATH = "/path/to/your/certificate.pem"

    SOFTWARE_NAME = input("üîç Enter the software name to search: ").strip()

    scanner = QualysSoftwareSearch(USERNAME, PASSWORD, CERT_PATH)
    scanner.run(SOFTWARE_NAME)

# ------------------ ENTRY POINT ------------------

if __name__ == "__main__":
    main()
